/// <reference types="tinycolor2" />
/// <reference types="jquery" />
import * as t from './types';
import * as namedColorVars from 'named-color-vars';
export declare class Instance {
    protected ns: string;
    protected ss: string;
    protected instance: number;
    protected options: t.Options;
    protected $window: JQuery;
    protected $document: JQuery;
    protected $html: JQuery;
    protected $head: JQuery;
    protected $body: JQuery;
    protected $picker: JQuery;
    protected $info: JQuery;
    protected $grid: JQuery;
    protected $search: JQuery;
    protected $searchSelect: JQuery;
    protected $searchOverlay: JQuery;
    protected $textarea: JQuery;
    protected emPixels: number;
    protected searchIcon: string;
    protected windowWidth: number;
    protected windowHeight: number;
    protected windowScrollTop: number;
    protected colorVars: namedColorVars.Colors;
    protected colorsByHex: t.Colors;
    protected colors: t.Colors;
    protected colorKeysByName: string[];
    protected colorKeysByHue: string[];
    protected colorOptions: t.ColorOption[];
    protected totalGridColors: number;
    protected onBeforeOpen: Function | undefined;
    protected onOpened: Function | undefined;
    protected onBeforeClose: Function | undefined;
    protected onClosed: Function | undefined;
    protected onColorActive: Function | undefined;
    protected onActiveColorClosed: Function | undefined;
    protected onColorSelected: Function | undefined;
    protected showCodes: boolean | Array<string>;
    defaultTiny: tinycolorInstance;
    lightTiny: tinycolorInstance;
    darkTiny: tinycolorInstance;
    constructor(options?: t.OptionsArg);
    protected setupColors(): void;
    protected setupSearchSelect(): void;
    protected setupEvents(): void;
    protected onColorClick(e: JQueryEventObject): void;
    protected onInfoCopyClick(e: JQueryEventObject): void;
    protected onInfoSelectClick(e: JQueryEventObject): void;
    protected onSearchSelect(key: string): void;
    protected onSearchOverlayClick(e: JQueryEventObject): void;
    protected onWindowResize(e: JQueryEventObject): void;
    protected onDocumentKeyup(e: JQueryEventObject): void;
    open(options?: t.OpenOptionsArg, hexKeyOrName?: t.Color | string): void;
    toggle(options?: t.OpenOptionsArg): boolean;
    close(restoreScrollTop?: boolean): void;
    getColors(): t.Colors;
    getColorKeysByName(): string[];
    getColorKeysByHue(): string[];
    getActiveColor(): t.Color | undefined;
    setActiveColor(hexKeyOrName: t.Color | string): void;
    selectActiveColor(): void;
    closeActiveColor(): void;
    openSearch(hexKeyOrName?: t.Color | string): void;
    toggleSearch(): boolean;
    closeSearch(): void;
    debounce(f: Function, delay: number): Function;
    getColor(hexKeyOrName: t.Color | string): t.Color | undefined;
    destroy(): void;
    protected closeOthers(): void;
    protected resizeGrid(): void;
    protected copyText(text: string): void;
    protected promptCopy(text: string): void;
    protected colorKeyToSlug(key: string): string;
    protected colorKeyToName(key: string): string;
    protected colorNameToKey(name: string): string;
    protected colorProps(key: string, hex: string): t.Color;
    protected sortColorKeys(colors: t.Colors, by: string): string[];
    protected optimalColorSize(x: number, y: number, n: number): number;
    protected destroySearchSelect(): void;
    protected removeGridStyles(): void;
    protected removeInfoStyles(): void;
    protected pickerMarkup(): string;
    protected gridStylesMarkup(gridPadding: number, colorMargin: number, colorSize: number): string;
    protected colorAnchorMarkup(color: t.Color): string;
    protected searchAnchorMarkup(): string;
    protected colorOptionMarkup(color: t.Color): string;
    protected infoMarkup(color: t.Color): string;
    protected infoArrowStylesMarkup(arrowClass: string, styles?: string): string;
    protected infoCssData($color: JQuery, color: t.Color): t.InfoCssData;
}
export default Instance;
